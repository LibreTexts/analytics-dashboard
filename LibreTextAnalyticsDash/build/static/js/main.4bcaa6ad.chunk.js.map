{"version":3,"sources":["scatterplot.js","bargraph.js","studentTable.js","studentChart.js","totalPageViewsChart.js","titleWithInfo.js","data_table.js","individual_student_timeline.js","collapsible_info_box.js","multiSelect.js","App.js","reportWebVitals.js","index.js"],"names":["React","Component","StudentTable","props","state","exportData","formatDate","val","type","original","max","d","Date","mostRecentAdaptLoad","arr","toString","split","headers","label","key","columns","Header","width","accessor","filterMethod","filter","rows","matchSorter","value","keys","filterAll","headerClassName","show","this","showColumns","getProps","rowInfo","column","style","background","Cell","hasAdapt","push","data","textAlign","overflow","defaultPageSize","gridArea","filterable","filename","Button","secondary","icon","Download","StudentChart","xaxisLabel","allData","useState","studentData","setStudentData","newWidth","setNewWidth","leftMargin","setLeftMargin","activeIndex","setActiveIndex","forEach","student","String","CustomTooltip","payload","newPayload","name","_id","count","DefaultTooltipContent","ResponsiveContainer","height","BarChart","margin","top","right","bottom","left","CartesianGrid","strokeDasharray","XAxis","dataKey","Label","position","YAxis","angle","Tooltip","cursor","content","allowEscapeViewBox","x","Bar","fill","onClick","index","findIndex","o","students","find","element","undefined","getStudents","map","entry","Box","flex","responsive","alignSelf","FormClose","PageViews","JSON","parse","interval","padding","minTickGap","tickMargin","binLabel","dy","yaxis","TitleText","title","text","topMargin","open","setOpen","align","direction","Text","size","weight","CircleInformation","Collapsible","color","opacity","round","pad","justify","DataTable","tab","reactTable","useRef","setExportData","column2Label","column3Label","idAccessor","getTrProps","instance","isEnrolled","numMatch","match","substring","replace","f","replaceAll","trim","parseInt","row","Object","includes","Tip","pageInfo","pageTitle","hasData","url","pageURL","length","href","target","createLink","ref","r","onFilteredChange","getResolvedState","sortedData","minRows","InfoBox","infoText","initShow","infoTextAlign","infoTextWidth","showIcon","setCount","main","message","alignContent","vertical","MultiSelect","filterClick","pathLength","levels","handleChange","init","clearPath","resetPath","chosenPath","setChosenPath","event","a","initData","stringify","i","e","temp","nodes","k","c","m","copyData","treeMap","onClickItem","handleClick","hasSearch","initialActiveKey","horizontal","primary","theme","global","colors","brand","font","family","App","start","setStart","end","setEnd","showFilter","setShowFilter","setTab","setIndividualStart","setIndividualEnd","disable","setDisable","disableCourse","setDisableCourse","setDisableStudent","disablePage","setDisablePage","disableAssignment","setDisableAssignment","course","setCourse","courseId","setCourseId","click","setClick","allPages","setAllPages","totalPageViews","setTotalPageViews","individualPageViews","setIndividualPageViews","individualAssignmentViews","setIndividualAssignmentViews","setOneStudent","studentDates","setStudentDates","setPageDates","setStudent","setPageData","setResult","studentResult","setStudentResult","pageResult","setPageResult","page","setPage","setPageId","barXAxis","setBarXAxis","barYAxis","barXAxisLabel","setBarXAxisLabel","barYAxisLabel","setIndex","display","setDisplay","bin","setBin","setBinLabel","unit","setUnit","setAllData","setPathLength","setChapters","setChapterLabel","setCourseChapter","allChapters","setAllChapters","courseLevel","setCourseLevel","dataPath","setDataPath","setCategory","setSubject","openFilter","setOpenFilter","studentChartData","setStudentChartData","reset","setReset","setResetPath","tagType","tagTitle","realCourses","setRealCourses","courseName","setCourseName","setSize","useLayoutEffect","useResizeObserver","contentRect","useSize","adaptLevels","setAdaptLevels","levelGroup","setLevelGroup","levelName","setLevelName","setHasAdapt","showInfoBox","setShowInfoBox","showTableFilters","setShowTableFilters","showCheckboxes","setShowCheckboxes","activityFilter","tableColumns","setTableColumns","checkedValues","setCheckedValues","homepage","getAggregateData","console","log","axios","method","startDate","endDate","path","groupBy","then","response","checks","getObjectList","pages","obj","s","getStudentChartData","getPageViewData","getIndividualPageViewData","p","lgroup","lname","individual","handleFilterClick","preventDefault","handleIndividual","alert","changeBinVal","option","id","pageId","pageViewCharts","useEffect","Tabs","onActive","handleTabs","overflowY","Tab","Spinner","Notification","onClose","Grommet","full","CheckBoxGroup","options","onChange","checked","v","splice","changeColumns","Grid","gap","areas","border","justifyContent","Layer","onEsc","onClickOutside","Close","Select","changeBarXAxis","xaxis","yaxisLabel","Filter","dropAlign","dropHeight","disabled","names","level_name","getAdaptLevels","chapter","longestPath","indexOf","getChapters","contentAlign","Heading","level","DateInput","format","min","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4bcaa6ad.chunk.js","sourcesContent":["import React from 'react';\nimport {DefaultTooltipContent} from 'recharts/lib/component/DefaultTooltipContent';\nimport { ScatterChart, CartesianGrid, XAxis, YAxis, ZAxis, Tooltip, Legend, Scatter, Label, ResponsiveContainer } from 'recharts';\n\nexport default class ScatterPlot extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    if (this.props.tab === \"student\") {\n      var name = 'Name';\n      var objects = 'Pages';\n    } else if (this.props.tab === \"page\") {\n      var name = 'Page'; //fix so that tooltip renders id if title not present\n      var objects = 'Times Viewed';\n    }\n    var xaxis = this.props.xaxis\n    this.props.data.sort(function(a, b) {\n      return a[xaxis] - b[xaxis];\n    });\n    const CustomTooltip = props => {\n      if (props.payload[0] != null) {\n        const newPayload = [\n          {\n            name: name,\n            value: props.payload[0].payload._id,\n          },\n          {\n            name: 'Average Duration',\n            value: props.payload[0].payload.durationInMinutes,\n          },\n          {\n            name: objects,\n            value: props.payload[0].payload.objectCount,\n          },\n          {\n            name: 'Average Percent',\n            value: props.payload[0].payload.percentAvg\n          }\n        ];\n        if (this.props.tab === \"page\" && props.payload[0].payload.pageTitle !== undefined) {\n          var id = {\n            name: name,\n            value: props.payload[0].payload.pageTitle,\n          }\n          newPayload.splice(0, 1, id)\n        }\n        return <DefaultTooltipContent payload={newPayload} />;\n      }\n      return <DefaultTooltipContent {...props} />;\n    };\n\n  return (\n    <ResponsiveContainer height={375} width=\"100%\">\n      <ScatterChart\n        margin={{ top: 25, right: 20, bottom: 25, left: 30 }}>\n        <CartesianGrid strokeDasharray=\"3 3\" />\n        <XAxis dataKey={this.props.xaxis}>\n          <Label value={this.props.xaxisLabel} position=\"bottom\" />\n        </XAxis>\n        <YAxis dataKey={this.props.yaxis}>\n          <Label value={this.props.yaxisLabel} position=\"insideBottomLeft\" angle=\"-90\"/>\n        </YAxis>\n        <Tooltip cursor={{ strokeDasharray: '3 3' }} content={<CustomTooltip/>}/>\n        <Scatter name=\"Pages\" dataKey={this.props.yaxis} data={this.props.data} fill=\"#0047BA\" line={{stroke: '#F93549', strokeWidth: 2}} lineType=\"fitting\" fillOpacity=\"80%\"/>\n      </ScatterChart>\n    </ResponsiveContainer>\n  )\n}\n}\n","import React from 'react';\nimport {DefaultTooltipContent} from 'recharts/lib/component/DefaultTooltipContent';\nimport { BarChart, CartesianGrid, XAxis, YAxis, ZAxis, Tooltip, Legend, Bar, Label, ResponsiveContainer } from 'recharts';\n\nexport default class BarGraph extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    if (this.props.tab === \"student\") {\n      var name = 'Student';\n      var objects = 'Pages Viewed';\n    } else if (this.props.tab === \"page\") {\n      var name = 'Page';\n      var objects = 'Times Viewed';\n    }\n    var xaxis = this.props.xaxis\n    this.props.data.sort(function(a, b) {\n      return a[xaxis] - b[xaxis];\n    });\n\n    const CustomTooltip = props => {\n      if (props.payload[0] != null) {\n        const newPayload = [\n          {\n            name: name,\n            value: props.payload[0].payload._id,\n          },\n          {\n            name: 'Average Duration',\n            value: props.payload[0].payload.durationInMinutes,\n          },\n          {\n            name: objects,\n            value: props.payload[0].payload.objectCount,\n          },\n          {\n            name: 'Average Percent Scrolled',\n            value: props.payload[0].payload.percentAvg,\n          }\n        ];\n        if (this.props.tab === \"page\" && props.payload[0].payload.pageTitle !== undefined) {\n          var id = {\n            name: name,\n            value: props.payload[0].payload.pageTitle,\n          }\n          newPayload.splice(0, 1, id)\n        }\n        return <DefaultTooltipContent payload={newPayload} />;\n      }\n      return <DefaultTooltipContent {...props} />;\n    };\n  return (\n    <ResponsiveContainer height={375} width={600}>\n      <BarChart width={550} height={375}\n        margin={{ top: 25, right: 20, bottom: 30, left: 30 }}\n        data={this.props.data}>\n        <CartesianGrid strokeDasharray=\"3 3\" />\n        <XAxis dataKey={this.props.xaxis}>\n          <Label value={this.props.xaxisLabel} position=\"bottom\" />\n        </XAxis>\n        <YAxis dataKey={this.props.yaxis}>\n          <Label value={this.props.yaxisLabel} position=\"insideBottomLeft\" angle=\"-90\"/>\n        </YAxis>\n        <Tooltip cursor={{ strokeDasharray: '3 3' }} content={<CustomTooltip/>}/>\n        <Bar dataKey={this.props.yaxis} fill=\"#0047BA\" />\n      </BarChart>\n    </ResponsiveContainer>\n  )\n}\n}\n","import React from 'react';\nimport ReactTable from 'react-table-6';\nimport {matchSorter} from 'match-sorter';\nimport { CSVLink, CSVDownload } from \"react-csv\";\nimport {Button} from \"grommet\";\nimport {Download} from \"grommet-icons\"\n\nexport default class StudentTable extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      exportData: 0,\n    };\n  }\n  render() {\n    //const [exportData, setExportData] = useState(this.props.data)\n    //console.log(this.props.data)\n    var filename = \"student-chart-data.csv\"\n\n    function createLink(pageInfo) {\n      var title = pageInfo.original.pageTitle\n      var url = pageInfo.original.pageURL\n      var tab = \"page\"\n      if (url === undefined) {\n        tab = \"student\"\n      }\n      if (tab === \"page\") {\n        return <a href={url} target=\"_blank\">{title}</a>\n      } else if (tab === \"student\") {\n        return pageInfo.original._id\n      }\n    }\n    function formatDate(val, type) {\n      if (type === \"lt\" && val.original.max) {\n        var d = new Date(val.original.max)\n      } else if (type === \"adapt\" && val.original.mostRecentAdaptLoad) {\n        var d = new Date(val.original.mostRecentAdaptLoad)\n      } else {\n        return \"\"\n      }\n      var arr = (d.toString().split(\" \"))\n      //console.log(d.toString())\n      return arr[1]+\" \"+arr[2]+\" \"+arr[3]\n    }\n    //console.log(this.props.data)\n    var headers = [\n      {label: 'Name', key: \"_id\"},\n      {label: \"LT Unique Pages Accessed\", key: 'objectCount'},\n      {label: 'LT Total Page Views', key: 'viewCount'},\n      {label: 'LT Most Recent Page Load', key: 'max'},\n      {label: 'LT Unique Interaction Days', key: 'dateCount'}\n    ]\n\n    var columns = [\n      {\n        Header: \"Name\",\n        width: 250,\n        accessor: \"_id\",\n        filterMethod: (filter, rows) =>\n          matchSorter(rows, filter.value, { keys: [\"_id\"] }),\n        filterAll: true\n      },\n      {\n        Header: \"Unique Pages Accessed\",\n        headerClassName: \"lt-data\",\n        accessor: \"objectCount\",\n        show: this.props.showColumns['LT Unique Pages Accessed'],\n        getProps: (state, rowInfo, column) => {\n                      return {\n                          style: {\n                              background: 'rgb(255, 255, 158, .5)',\n                          },\n                      };\n                  },\n        filterMethod: (filter, rows) =>\n          matchSorter(rows, filter.value, { keys: [\"objectCount\"] }),\n        filterAll: true\n      },\n      {\n        Header: \"Total Page Views\",\n        headerClassName: \"lt-data\",\n        accessor: \"viewCount\",\n        show: this.props.showColumns['LT Total Page Views'],\n        getProps: (state, rowInfo, column) => {\n                return {\n                    style: {\n                        background: 'rgb(255, 255, 158, .5)',\n                    },\n                };\n            },\n        filterMethod: (filter, rows) =>\n          matchSorter(rows, filter.value, { keys: [\"viewCount\"] }),\n        filterAll: true\n      },\n      {\n        Header: \"Most Recent Page Load\",\n        headerClassName: \"lt-data\",\n        accessor: \"max\",\n        show: this.props.showColumns['LT Most Recent Page Load'],\n        Cell: val => formatDate(val, \"lt\"),\n        getProps: (state, rowInfo, column) => {\n                return {\n                    style: {\n                        background: 'rgb(255, 255, 158, .5)',\n                    },\n                };\n            },\n        filterMethod: (filter, rows) =>\n          matchSorter(rows, filter.value, { keys: [\"max\"] }),\n        filterAll: true\n      },\n      {\n        Header: \"Unique Interaction Days\",\n        headerClassName: \"lt-data\",\n        accessor: \"dateCount\",\n        show: this.props.showColumns['LT Unique Interaction Days'],\n        getProps: (state, rowInfo, column) => {\n                return {\n                    style: {\n                        background: 'rgb(255, 255, 158, .5)',\n                    },\n                };\n            },\n        filterMethod: (filter, rows) =>\n          matchSorter(rows, filter.value, { keys: [\"dateCount\"] }),\n        filterAll: true\n      }\n    ]\n\n    if (this.props.hasAdapt) {\n      headers.push(\n        {label: 'Adapt Unique Interaction Days', key: 'adaptUniqueInteractionDays'},\n        {label: 'Adapt Unique Assignments', key: 'adaptUniqueAssignments'},\n        {label: 'Adapt Most Recent Page Load', key: 'mostRecentAdaptLoad'}\n      )\n      columns.push(\n        {\n          Header: \"Unique Interaction Days\",\n          headerClassName: \"adapt-data\",\n          accessor: \"adaptUniqueInteractionDays\",\n          show: this.props.showColumns['Adapt Unique Interaction Days'],\n          getProps: (state, rowInfo, column) => {\n                  return {\n                      style: {\n                          background: 'rgb(171, 247, 177, .5)',\n                      },\n                  };\n              },\n          filterMethod: (filter, rows) =>\n            matchSorter(rows, filter.value, { keys: [\"adaptUniqueInteractionDays\"] }),\n          filterAll: true\n        },\n        {\n          Header: \"Unique Assignments\",\n          headerClassName: \"adapt-data\",\n          accessor: \"adaptUniqueAssignments\",\n          show: this.props.showColumns['Adapt Unique Assignments'],\n          getProps: (state, rowInfo, column) => {\n                  return {\n                      style: {\n                          background: 'rgb(171, 247, 177, .5)',\n                      },\n                  };\n              },\n          filterMethod: (filter, rows) =>\n            matchSorter(rows, filter.value, { keys: [\"adaptUniqueAssignments\"] }),\n          filterAll: true},\n        {\n          Header: \"Most Recent Page Load\",\n          headerClassName: \"adapt-data\",\n          accessor: \"mostRecentAdaptLoad\",\n          show: this.props.showColumns['Adapt Most Recent Page Load'],\n          Cell: val => formatDate(val, \"adapt\"),\n          getProps: (state, rowInfo, column) => {\n                  return {\n                      style: {\n                          background: 'rgb(171, 247, 177, .5)'\n                      },\n                  };\n              },\n          filterMethod: (filter, rows) =>\n            matchSorter(rows, filter.value, { keys: [\"mostRecentAdaptLoad\"] }),\n          filterAll: true\n        }\n      )\n    }\n\n    return (\n      <>\n      <ReactTable\n        data={this.props.data}\n        columns={columns}\n        style={{textAlign: 'center', overflow: 'hidden'}}\n        defaultPageSize={5}\n        gridArea=\"table\"\n        filterable={true}\n      >\n      </ReactTable>\n      <div>\n        <CSVLink data={this.props.data} headers={headers} filename={filename}>\n          <Button secondary icon={<Download/>} />\n        </CSVLink>\n      </div>\n      </>\n    )\n  }\n}\n","import React from 'react';\nimport {DefaultTooltipContent} from 'recharts/lib/component/DefaultTooltipContent';\nimport { BarChart, CartesianGrid, Cell, XAxis, YAxis, ZAxis, Tooltip, Legend, Bar, Label, ResponsiveContainer } from 'recharts';\nimport StudentTable from \"./studentTable.js\"\nimport {Box, Button} from \"grommet\"\nimport {FormClose} from \"grommet-icons\"\n\nexport default function StudentChart({\n    xaxisLabel,\n    data,\n    width,\n    allData,\n    hasAdapt,\n    showColumns\n  }) {\n    const [studentData, setStudentData] = React.useState(null);\n    const [newWidth, setNewWidth] = React.useState(width);\n    const [leftMargin, setLeftMargin] = React.useState(30);\n    const [activeIndex, setActiveIndex] = React.useState(-1);\n\n    if (xaxisLabel === \"Most Recent Page Load\") {\n       data.forEach(student => {\n         student['_id'] = String(student['_id']).split(\"T\")[0]\n       })\n   }\n\n   function getStudents(val, allData, original) {\n     //console.log(val)\n     //console.log(original)\n     var index = original.findIndex(o => o._id === val._id)\n     setActiveIndex(index)\n     var data = []\n     var students = val.students\n     while (index >= 0) {\n       students = original[index]['students']\n       students.forEach(student => {\n         data.push(allData.find(o => o._id === student))\n       })\n       index = index - 1\n     }\n     data = data.filter(element => {\n        return element !== undefined;\n      });\n     //console.log(data)\n     setNewWidth(450)\n     setLeftMargin(10)\n     setStudentData(data)\n   }\n\n   function clearChart() {\n     setStudentData(null);\n     setActiveIndex(-1);\n     setNewWidth(width);\n   }\n\n    const CustomTooltip = props => {\n      if (props.payload[0] != null) {\n        const newPayload = [\n          {\n            name: xaxisLabel,\n            value: props.payload[0].payload._id,\n          },\n          {\n            name: 'Student Count',\n            value: props.payload[0].payload.count,\n          }\n        ];\n        return <DefaultTooltipContent payload={newPayload} />;\n      }\n      return <DefaultTooltipContent {...props} />;\n    };\n  return (\n    <>\n    <ResponsiveContainer width={newWidth} height=\"90%\">\n      <BarChart\n        margin={{ top: 25, right: 30, bottom: 30, left: leftMargin }}\n        data={data}\n        >\n        <CartesianGrid strokeDasharray=\"3 3\" />\n        <XAxis dataKey=\"_id\">\n          <Label value={xaxisLabel} position=\"bottom\" />\n        </XAxis>\n        <YAxis dataKey=\"count\">\n          <Label value=\"Number of Students\" position=\"insideBottomLeft\" angle=\"-90\"/>\n        </YAxis>\n        <Tooltip cursor={{ strokeDasharray: '3 3' }} content={<CustomTooltip/>} allowEscapeViewBox={{x: false}}/>\n        <Bar dataKey=\"count\" fill=\"#0047BA\" onClick={(val) => getStudents(val, allData, data)}>\n        {data.map((entry, index) => (\n                <Cell cursor=\"pointer\" fill={index <= activeIndex ? '#FFBF00' : '#0047BA'} key={`cell-${index}`}/>\n              ))}\n        </Bar>\n      </BarChart>\n    </ResponsiveContainer>\n    {studentData &&\n      <Box fill={true} flex={true} responsive={true}>\n        <Button alignSelf=\"end\" onClick={clearChart} icon={<FormClose />}/>\n        <StudentTable data={studentData} hasAdapt={hasAdapt} showColumns={showColumns}/>\n      </Box>\n    }\n    </>\n  )\n}\n","import React from 'react';\nimport {DefaultTooltipContent} from 'recharts/lib/component/DefaultTooltipContent';\nimport { BarChart, CartesianGrid, XAxis, YAxis, ZAxis, Tooltip, Legend, Bar, Label, ResponsiveContainer } from 'recharts';\n\nexport default class PageViews extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    //console.log(JSON.parse(this.props.data)['documents'])\n    //console.log(typeof(JSON.parse(this.props.data)['documents'][0]['dateString']))\n    var height = 350\n    if (this.props.height) {\n      height = this.props.height\n    }\n    var type = this.props.type\n    var label = \"Pages Viewed\"\n    if (type === \"individual\") {\n      label = \"Total Views\"\n    }\n  return (\n    <ResponsiveContainer height={height}>\n      <BarChart width={500} height={height}\n        margin={{ right: 20, bottom: 80, left: 30 }}\n        data={JSON.parse(this.props.data)['documents']}>\n        <CartesianGrid strokeDasharray=\"3 3\" />\n        <XAxis dataKey=\"dateString\" interval=\"preserveStartEnd\" padding={{ right: 20 }} minTickGap={10} angle={45} tickMargin={25} >\n          <Label value={\"Date (By \"+this.props.binLabel+\")\"} position=\"bottom\" dy={50}/>\n        </XAxis>\n        <YAxis dataKey={this.props.yaxis}>\n          <Label value={label} position=\"insideBottomLeft\" angle=\"-90\"/>\n        </YAxis>\n        <Tooltip cursor={{ strokeDasharray: '3 3' }} />\n        <Bar dataKey={this.props.yaxis} fill=\"#0047BA\" />\n      </BarChart>\n      </ResponsiveContainer>\n  )\n}\n}\n","import React from 'react';\nimport {Box, Button, Collapsible, Text} from \"grommet\";\nimport {CircleInformation} from \"grommet-icons\";\n\nexport default function TitleText({\n  title,\n  text,\n  topMargin\n}) {\n  const [open, setOpen] = React.useState(true);\n  return (\n    <Box align=\"center\" direction=\"column\" gridArea='title' margin={{top: topMargin}}>\n      <Box direction=\"row\" align=\"center\">\n        <Text size=\"xlarge\" weight=\"bold\" textAlign=\"center\">{title}</Text>\n        <Button alignSelf=\"end\" onClick={() => setOpen(!open)} icon={<CircleInformation />} />\n      </Box>\n      <Collapsible open={open} direction=\"vertical\" alignSelf=\"start\" margin={{top: topMargin}}>\n        <Box\n          background={{color: \"#6FCFEB\", opacity: \"medium\"}}\n          round=\"medium\"\n          pad=\"medium\"\n          align=\"center\"\n          justify=\"center\"\n        >\n          <Text>{text}</Text>\n        </Box>\n      </Collapsible>\n\n    </Box>\n  )\n\n\n}\n","import React from 'react';\nimport ReactTable from 'react-table-6';\nimport {matchSorter} from 'match-sorter';\nimport { CSVLink, CSVDownload } from \"react-csv\";\nimport {Button, Text, Tip} from \"grommet\";\nimport {Download} from \"grommet-icons\"\nimport \"./index.css\"\n\nexport default function DataTable({\n  tab,\n  data,\n  hasAdapt,\n  showColumns\n  }) {\n    //console.log(\"TAB\", tab)\n    //console.log(showColumns)\n    const [pageSize, setPageSize] = React.useState(20);\n    let reactTable = React.useRef(null);\n    const [exportData, setExportData] = React.useState(data)\n    //console.log(this.props.data)\n    if (tab === \"student\") {\n      var column2Label = \"Unique Pages Accessed\";\n      var column3Label = \"Total Page Views\"\n      var idAccessor = \"_id\";\n      var filename = \"student-data.csv\"\n    } else if (tab === \"page\") {\n      var column3Label = \"Number of Times Viewed\";\n      var column2Label = \"Total Students Who Viewed\"\n      var idAccessor = \"pageTitle\";\n      var filename = \"page-data.csv\"\n    }\n\n    if (tab === \"student\") {\n      var getTrProps = (state, rowInfo, instance) => {\n      if (rowInfo) {\n        //console.log(rowInfo)\n        return {\n          style: {\n            background: rowInfo.original.isEnrolled ? 'white' : 'Gainsboro',\n            opacity: rowInfo.original.isEnrolled ? 1 : .4\n          }\n        }\n      }\n      return {};\n    }\n  }\n\n    data.forEach((val, index) => {\n      if (Object.keys(val).includes('max')) {\n        data[index]['max'] = formatDate(val['max'])\n      } else if (!Object.keys(val).includes('max')) {\n        data[index]['max'] = \"\"\n      }\n      if (val['mostRecentAdaptLoad']) {\n        data[index]['mostRecentAdaptLoad'] = formatDate(val['mostRecentAdaptLoad'])\n      }\n    })\n\n    function numMatch(rows, filter, val) {\n      var key = val.keys[0]\n\n      var match = filter.substring(0, 2).replace(/[0-9]/g, '')\n\n      if (match === \"<=\") {\n        var f = filter.replaceAll(\"<=\", \"\").trim()\n        f = parseInt(f)\n        return rows.filter(row => row[key] <= f)\n      } else if (match.trim() === \"<\") {\n        var f = filter.replaceAll(\"<\", \"\").trim()\n        f = parseInt(f)\n        return rows.filter(row => row[key] < f)\n      } else if (match.trim() === \">\") {\n        var f = filter.replaceAll(\">\", \"\").trim()\n        f = parseInt(f)\n        return rows.filter(row => row[key] > f)\n      } else if (match === \">=\") {\n        var f = filter.replaceAll(\">=\", \"\").trim()\n        f = parseInt(f)\n        return rows.filter(row => row[key] >= f)\n      } else if (parseInt(filter) || match.trim() === \"=\"){\n        var f = filter.replaceAll(\"=\", \"\").trim()\n        f = parseInt(f)\n        return rows.filter(row => row[key] === f)\n      } else {\n        return []\n      }\n    }\n\n    function dateMatch(rows, filter, val) {\n      var key = val.keys[0]\n\n      var date = new Date(filter)\n\n      return rows.filter(row => new Date(row[key]) >= date)\n    }\n\n    function createLink(pageInfo, idAccessor) {\n      var title = pageInfo.original.pageTitle\n      var hasData = pageInfo.original.hasData\n      var isEnrolled = pageInfo.original.isEnrolled\n      var url = pageInfo.original.pageURL\n      var tab = \"page\"\n      if (!url || url.length === 0) {\n        tab = \"student\"\n      }\n      if (tab === \"page\") {\n        return <a href={url} target=\"_blank\">{title}</a>\n      } else if (tab === \"student\" && hasData) {\n        return pageInfo.original._id\n      } else if (tab === \"student\" && !hasData) {\n        return <Text weight=\"bold\">{pageInfo.original._id}</Text>\n      }\n    }\n\n    function formatDate(val, type) {\n      if (val) {\n        var d = new Date(val)\n        var arr = (d.toString().split(\" \"))\n\n        return arr[1]+\" \"+arr[2]+\" \"+arr[3]\n      } else {\n        return \"\"\n      }\n    }\n\n    //console.log(data)\n    var headers = [\n      {label: 'Name', key: idAccessor},\n      {label: 'LT '+column2Label, key: 'objectCount'}\n    ]\n\n    var columns = [\n      {Header: <Tip content=\"Name\">Name</Tip>, width: 250, accessor: idAccessor,\n        Cell: val => (createLink(val, idAccessor)),\n            filterMethod: (filter, rows) =>\n              matchSorter(rows, filter.value, { keys: [idAccessor] }),\n            filterAll: true}\n    ]\n\n    if (tab === \"student\") {\n      headers.push(\n        {label: 'LT '+column3Label, key: 'viewCount'},\n        {label: 'LT Most Recent Page Load', key: 'max'},\n        {label: 'LT Unique Interaction Days', key: 'dateCount'}\n      )\n      columns.push(\n      {\n        Header: <Tip content={column2Label}>{column2Label}</Tip>,\n        headerClassName: \"lt-data\",\n        accessor: \"objectCount\",\n        show: showColumns[\"LT \" + column2Label],\n        getProps: (state, rowInfo, column) => {\n                return {\n                    style: {\n                        background: 'rgb(255, 255, 158, .5)',\n                    },\n                };\n            },\n        filterMethod: (filter, rows) =>\n          numMatch(rows, filter.value, { keys: [\"objectCount\"] }),\n        filterAll: true\n        },\n        {\n          Header: <Tip content={column3Label}>{column3Label}</Tip>,\n          headerClassName: \"lt-data\",\n          accessor: \"viewCount\",\n          show: showColumns['LT '+ column3Label],\n          getProps: (state, rowInfo, column) => {\n                  return {\n                      style: {\n                          background: 'rgb(255, 255, 158, .5)',\n                      },\n                  };\n              },\n          filterMethod: (filter, rows) =>\n            numMatch(rows, filter.value, { keys: [\"viewCount\"] }),\n          filterAll: true\n        },\n        {\n          Header: <Tip style={{opacity: 1}} content=\"Most Recent Page Load\">Most Recent Page Load</Tip>,\n          headerClassName: \"lt-data\",\n          accessor: \"max\",\n          show: showColumns[\"LT Most Recent Page Load\"],\n          //Cell: val => formatDate(val, \"lt\"),\n          getProps: (state, rowInfo, column) => {\n                  return {\n                      style: {\n                          background: 'rgb(255, 255, 158, .5)',\n                      },\n                  };\n              },\n          filterMethod: (filter, rows) =>\n            matchSorter(rows, filter.value, { keys: [\"max\"] }),\n          filterAll: true\n        },\n        {\n          Header: <Tip content=\"Unique Interaction Days\">Unique Interaction Days</Tip>,\n          headerClassName: \"lt-data\",\n          accessor: \"dateCount\",\n          show: showColumns['LT Unique Interaction Days'],\n          getProps: (state, rowInfo, column) => {\n                  return {\n                      style: {\n                          background: 'rgb(255, 255, 158, .5)',\n                      },\n                  };\n              },\n          filterMethod: (filter, rows) =>\n            numMatch(rows, filter.value, { keys: [\"dateCount\"] }),\n          filterAll: true\n        })\n    } else if (tab === \"page\") {\n      headers.push(\n        {label: 'Average Page Duration', key: 'durationInMinutes'},\n        {label: 'Average Percent Scrolled', key: 'percentAvg'}\n      )\n      columns.push(\n      {\n        Header: column2Label,\n        accessor: \"objectCount\",\n        filterMethod: (filter, rows) =>\n          numMatch(rows, filter.value, { keys: [\"objectCount\"] }),\n        filterAll: true\n      },\n      {\n        Header: \"Average Page Duration (minutes)\",\n        accessor: \"durationInMinutes\",\n        filterMethod: (filter, rows) =>\n          numMatch(rows, filter.value, { keys: [\"durationInMinutes\"] }),\n        filterAll: true\n      },\n      {\n        Header: \"Average Percent Scrolled\", accessor: \"percentAvg\",\n        filterMethod: (filter, rows) =>\n          numMatch(rows, filter.value, { keys: [\"percentAvg\"] }),\n        filterAll: true\n      })\n    }\n\n    if (tab === \"student\" && hasAdapt) {\n      headers.push(\n        {label: 'Adapt Unique Interaction Days', key: 'adaptUniqueInteractionDays'},\n        {label: 'Adapt Unique Assignments', key: 'adaptUniqueAssignments'},\n        {label: 'Adapt Most Recent Page Load', key: 'mostRecentAdaptLoad'}\n      )\n      columns.push(\n      {\n        Header: <Tip content=\"Unique Interaction Days\">Unique Interaction Days</Tip>,\n        headerClassName: \"adapt-data\",\n        accessor: \"adaptUniqueInteractionDays\",\n        show: showColumns['Adapt Unique Interaction Days'],\n        getProps: (state, rowInfo, column) => {\n                return {\n                    style: {\n                        background: 'rgb(171, 247, 177, .5)',\n                    },\n                };\n            },\n        filterMethod: (filter, rows) =>\n          numMatch(rows, filter.value, { keys: [\"adaptUniqueInteractionDays\"] }),\n        filterAll: true\n      },\n      {\n        Header: <Tip content=\"Unique Assignments\">Unique Assignments</Tip>,\n        headerClassName: \"adapt-data\",\n        accessor: \"adaptUniqueAssignments\",\n        show: showColumns['Adapt Unique Assignments'],\n        getProps: (state, rowInfo, column) => {\n                return {\n                    style: {\n                        background: 'rgb(171, 247, 177, .5)',\n                    },\n                };\n            },\n        filterMethod: (filter, rows) =>\n          numMatch(rows, filter.value, { keys: [\"adaptUniqueAssignments\"] }),\n        filterAll: true\n      },\n      {\n        Header: <Tip content=\"Most Recent Page Load\">Most Recent Page Load</Tip>,\n        headerClassName: \"adapt-data\",\n        accessor: \"mostRecentAdaptLoad\",\n        show: showColumns['Adapt Most Recent Page Load'],\n        //Cell: val => formatDate(val, \"adapt\"),\n        getProps: (state, rowInfo, column) => {\n                return {\n                    style: {\n                        background: 'rgb(171, 247, 177, .5)'\n                    },\n                };\n            },\n        filterMethod: (filter, rows) =>\n          matchSorter(rows, filter.value, { keys: [\"mostRecentAdaptLoad\"] }),\n        filterAll: true\n      })\n    }\n\n    return (\n      <>\n      <ReactTable\n        data={data}\n        ref={(r) => {\n          reactTable = r;\n        }}\n        onFilteredChange={() => {\n          setExportData(reactTable.getResolvedState().sortedData);\n        }}\n        columns={columns}\n        style={{textAlign: 'center', overflow: 'hidden'}}\n        minRows={1}\n        gridArea=\"table\"\n        filterable={true}\n        getTrProps={getTrProps}\n      >\n      </ReactTable>\n      <div>\n        <CSVLink data={exportData} headers={headers} filename={filename}>\n          <Button secondary icon={<Download/>} />\n        </CSVLink>\n      </div>\n      </>\n    )\n  }\n","import React from \"react\";\nimport {Chart} from \"react-google-charts\";\nimport { ComposedChart, XAxis, YAxis, Tooltip, Legend, Area, CartesianGrid, Bar, Line, Rectangle, ReferenceDot } from \"recharts\";\nimport ReactTable from \"react-table-6\";\nimport * as d3 from \"d3\";\nimport moment from 'moment';\nimport {Axis, axisPropsFromTickScale, TOP, BOTTOM} from 'react-d3-axis';\n\nexport default class IndividualTimeline extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    if (this.props.tab === \"student\") {\n      var name = 'Page';\n      var idAccessor = \"pageTitle\";\n    } else if (this.props.tab === \"page\") {\n      var name = 'Student';\n      var idAccessor = \"_id\";\n    }\n    let i = 1;\n    function getDate(date) {\n      return new Date(date).getTime()\n    }\n    function getInit(dates) {\n      (dates.sort((a, b) => new Date(a)-new Date(b)))\n      return dates[0];\n    }\n    function getLast(dates) {\n      (dates.sort((a, b) => new Date(b)-new Date(a)))\n      return dates[0];\n    }\n\n    function renderRect(currentRects, start, end, init, final) {\n      var timeScale = d3.scaleTime()\n        .domain([init, final])\n        .range([0, 625]);\n      i = i+1;\n      var startDate = getDate(start);\n      var endDate = getDate(end);\n      var duration = Math.ceil(timeScale(endDate) - timeScale(startDate));\n      var showStart = new Date(start).toString();\n      var showEnd = new Date(end).toString();\n      var offset = 10;\n\n      if (duration === 0) {\n        duration = 1;\n      }\n      if (currentRects !== [] && currentRects.length > 1) {\n        var firstInGroup = currentRects[currentRects.length-1]\n      } else {\n        var firstInGroup = null;\n      }\n      if (firstInGroup !== null && ((firstInGroup.props.x + firstInGroup.props.width) >= timeScale(startDate))) {\n        if (currentRects[currentRects.length-1].props.children.props.children.length > 4) {\n          var show = currentRects[currentRects.length-1].props.children.props.children[5]\n          var views = currentRects[currentRects.length-1].props.children.props.children[1]\n        } else {\n          var show = currentRects[currentRects.length-1].props.children.props.children[1]\n          var views = 1\n        }\n        views += 1\n        currentRects[currentRects.length-1] = (<rect height={15} width={firstInGroup.props.width+duration} x={firstInGroup.props.x} y={0} >\n          <title>Shows {views} views:{\"\\n\"}From {show}to {showEnd}</title>\n        </rect>)\n      } else {\n         currentRects.push(\n          <rect height={15} width={duration} x={timeScale(startDate)} y={0} >\n            <title>Start: {showStart+\"\\n\"} End: {showEnd}</title>\n          </rect>\n      )\n    }\n    return currentRects;\n    }\n\n    function multiplePages(val, earliest, latest, data) {\n      var init = (new Date(earliest))\n      var final = (new Date(latest))\n      var allTimes = []\n\n      val.forEach((dateRange, n) => {\n        //allTimes.push(renderRect(dateRange[0], dateRange[1], init, final))\n        allTimes = (renderRect(allTimes, dateRange[0], dateRange[1], init, final))\n      })\n      return allTimes;\n    }\n\n    function renderAxis(init, final) {\n      var timeScale = d3.scaleTime()\n        .domain([new Date(init), new Date(final)])\n        .range([0, 625]);\n\n      return <Axis {...axisPropsFromTickScale(timeScale, 10)} style={{orient: BOTTOM}}/>\n    }\n\n    function createLink(pageInfo) {\n      //console.log(pageInfo)\n      var title = pageInfo.original.pageTitle\n      var url = pageInfo.original.pageURL\n      var tab = \"student\"\n      if (url === undefined) {\n        tab = \"page\"\n      }\n      //console.log(url)\n      //return url\n      if (tab === \"student\") {\n        return <a href={url} target=\"_blank\">{title}</a>\n      } else if (tab === \"page\") {\n        return pageInfo.original._id\n      }\n    }\n\n    return (\n      <ReactTable\n        data={this.props.data}\n        columns={\n          [\n            {Header: name, accessor: idAccessor, maxWidth: 580, Cell: val => <div>{createLink(val)}</div>, flexGrow: 1},\n            {Header: <svg width=\"100%\" height={25}>{renderAxis(this.props.earliest, this.props.latest)}</svg>, id: i, accessor: \"dateRange\", Cell: val => (<svg width=\"100%\" height={15} preserveAspectRatio=\"none\">{multiplePages(val.value, this.props.earliest, this.props.latest, this.props.data)}</svg>)}\n          ]\n        }\n        style={{overflow: \"scroll\"}}\n        width=\"100%\"\n        defaultPageSize={this.props.data.length}\n        pageSize={this.props.data.length}\n        minRows={this.props.data.length}\n        responsive={true}\n      />\n    )\n  }\n}\n","import {Box, Button, Collapsible, Text} from \"grommet\";\nimport React, {useState} from \"react\";\nimport {FormClose} from \"grommet-icons\";\n\nexport default function InfoBox({\n  infoText,\n  initShow = true,\n  infoTextAlign=\"center\",\n  infoTextWidth=100,\n  showIcon = false,\n  icon,\n  color,\n  count,\n  setCount,\n  main = false\n}) {\n  let [open, setOpen] = useState(initShow);\n  let message = []\n  message.push(<Text alignSelf=\"center\" margin={{top: \"small\"}}>{infoText}</Text>)\n\n  function handleClick() {\n    setOpen(!open)\n    setCount(count+1)\n  }\n\n  return (\n    <>\n        <Collapsible open={open} direction=\"vertical\" alignSelf=\"start\">\n          <Box\n            background={{color: color, opacity: .5}}\n            pad=\"medium\"\n            align=\"center\"\n            alignContent=\"center\"\n            alignSelf=\"center\"\n            justify=\"center\"\n            height=\"xsmall\"\n            width=\"75%\"\n            margin={{vertical: \"small\"}}\n          >\n          <Box height=\"xsmall\" width=\"100%\" direction=\"row\">\n          { showIcon &&\n            <Button alignSelf=\"start\" icon={icon} />\n          }\n          <Box direction=\"row\" width=\"90%\" alignSelf=\"start\" alignContent=\"center\" align=\"start\" justify=\"center\">\n            {message}\n          </Box>\n          <Box alignSelf=\"end\" width=\"10%\" justify=\"end\">\n            <Button margin={{bottom: \"medium\"}} alignSelf=\"end\" onClick={handleClick} icon={<FormClose />}/>\n          </Box>\n          </Box>\n          </Box>\n        </Collapsible>\n        </>\n    )\n  }\n","import React from 'react';\nimport { Box, Button, Text } from \"grommet\";\nimport TreeMenu from 'react-simple-tree-menu';\nimport '../node_modules/react-simple-tree-menu/dist/main.css';\n\nexport default function MultiSelect({\n  data,\n  pathLength,\n  levels,\n  //chosenPath,\n  //setChosenPath,\n  filterClick,\n  handleChange,\n  init,\n  clearPath,\n  resetPath\n}) {\n    const [chosenPath, setChosenPath] = React.useState();\n\n    function treeMap(initData) {\n      var data = JSON.parse(JSON.stringify(initData))\n      var i = Object.keys(data).length-1\n      var allData = []\n      while (i > 1) {\n        var arr = []\n        Object.keys(data[i]).forEach(e => {\n          var temp = {\n            label: e.replaceAll(\"_\", \" \"),\n            key: e,\n            nodes: data[i][e]\n          }\n          arr.push(temp)\n        })\n        allData.push(arr)\n        i = i - 1\n      }\n\n      var x = allData.length - 1\n      Object.keys(allData[0]).forEach((k, index) => {\n        allData[0][k].nodes.forEach((c, m) => {\n          allData[0][k].nodes[m] = {\n            label: c.replaceAll(\"_\", \" \"),\n            key: c,\n            nodes: []\n          }\n        })\n      })\n\n      var copyData = JSON.parse(JSON.stringify(allData))\n      while (x > 0) {\n        copyData[x].forEach(key => {\n          key.nodes.forEach((k, index) => {\n            if (copyData[x-1].find(o => o.key === k)) {\n              key.nodes[index] = copyData[x-1].find(o => o.key === k)\n            } else if (typeof(key.nodes[index]) !== Object){\n              key.nodes[index] = {\n                label: k.replaceAll(\"_\", \" \"),\n                key: k,\n                nodes: []\n              }\n            }\n          })\n        })\n        x = x - 1\n      }\n      return copyData[allData.length-1]\n    }\n\n    function chosen(val, event) {\n      event.preventDefault()\n      if (chosenPath.length === 0) {\n        var chosen = []\n      } else {\n        var chosen = [...chosenPath]\n      }\n      chosen.push(<br/>)\n      chosen.push(val)\n      setChosenPath(chosen)\n    }\n\n    function makeTree(obj, data, levels) {\n      let allData= []\n      const visit = (obj, fn) => {\n          const values = Object.values(obj)\n          values.forEach((val) => {\n            if (val && typeof(val) === \"object\") {\n              visit(val, fn)\n            } else {\n              fn(val)\n            }\n          })\n      }\n\n      visit(obj, (val) => {\n          var lookup = levels[val]\n          if (lookup === undefined) {\n            lookup = pathLength-1\n          }\n          var num = lookup * 20\n          var tab = String(num) + \"px\"\n          if (lookup === pathLength-1) {\n            allData.push(<Box><Text label={lookup} margin={{left: tab}}>{val.replaceAll(\"_\", \" \")}</Text></Box>)\n          } else {\n            allData.push(<Box><Text label={lookup} margin={{left: tab}} onClick={(e) => chosen(val, e)} style={{cursor: 'pointer'}}>{val.replaceAll(\"_\", \" \")}</Text></Box>)\n          }\n      })\n      return <div className=\"collapsible\"> {allData} </div>\n    }\n\n    async function handleClick(event) {\n      //console.log(event.key)\n      setChosenPath(event.key)\n      //console.log(chosenPath)\n      //filterClick(event)\n      handleChange(\"path\", event.key)\n    }\n\n    // <Box>\n    //   <Box margin={{bottom: 'medium'}}>\n    //     <Text>Chosen Path: {chosenPath}</Text>\n    //   </Box>\n    // </Box>\n\n  return (\n    <Box width=\"100%\">\n    {!resetPath &&\n      <>\n      <TreeMenu data={treeMap(data)} onClickItem={(event) => {handleClick(event)}} hasSearch={false} initialActiveKey={init}/>\n      <Button secondary label=\"Clear Current Path\" color=\"#022851\" onClick={clearPath} margin={{bottom: \"small\", horizontal: \"large\"}}/>\n      </>\n    }\n      <Button primary label=\"Apply\" color=\"#022851\" margin={{horizontal: \"large\"}} onClick={(event) => {filterClick(event, chosenPath)}} />\n    </Box>\n  )\n  }\n","\nimport React from 'react';\nimport {useEffect, useState, useRef} from 'react';\nimport \"react-table-6/react-table.css\";\nimport { Grommet, Heading, Box, Button, CheckBox, CheckBoxGroup, Collapsible, DateInput, Grid, Layer, Notification, Select, Spinner, Tabs, Tab, Text } from 'grommet';\nimport { Close, Filter, Menu} from \"grommet-icons\";\nimport ScatterPlot from \"./scatterplot.js\";\nimport './index.css';\nimport BarGraph from './bargraph.js';\nimport StudentChart from './studentChart.js';\nimport PageViews from './totalPageViewsChart.js';\nimport TitleText from './titleWithInfo.js';\nimport DataTable from './data_table.js';\nimport AdaptTable from \"./adaptTable.js\";\nimport IndividualTimeline from \"./individual_student_timeline.js\";\nimport InfoBox from \"./collapsible_info_box.js\";\nimport MultiSelect from \"./multiSelect.js\";\nimport axios from 'axios';\nimport useResizeObserver from '@react-hook/resize-observer'\n\nconst theme = {\n  global: {\n   colors: {\n     brand: '#022851',\n   },\n    font: {\n      family: 'Roboto',\n      size: '18px',\n      height: '20px',\n    },\n  },\n}\n\nconst useSize = (target) => {\n  const [size, setSize] = React.useState()\n  //console.log(target)\n    React.useLayoutEffect(() => {\n      //if (target.current && target.current.clientHeight !== null) {\n        //setSize(target.current.getBoundingClientRect())\n      //}\n    }, [target])\n    useResizeObserver(target, (entry) => setSize(entry.contentRect))\n  return size\n}\n\nfunction App() {\n  const [start, setStart] = useState(null);\n  const [end, setEnd] = useState(null);\n  const [show, setShow] = useState(false);\n  const [showFilter, setShowFilter] = useState(false);\n  const [tab, setTab] = useState(\"student\");\n  const [individualStart, setIndividualStart] = useState(null);\n  const [individualEnd, setIndividualEnd] = useState(null);\n  const [disable, setDisable] = useState(false);\n  const [disableCourse, setDisableCourse] = useState(false);\n  const [disableStudent, setDisableStudent] = useState(false);\n  const [disablePage, setDisablePage] = useState(false);\n  const [disableAssignment, setDisableAssignment] = useState(false);\n  const [allCourses, setAllCourses] = useState(null);\n  const [allCourseNames, setAllCourseNames] = useState(null);\n  const [course, setCourse] = useState(null);\n  const [courseId, setCourseId] = useState(null);\n  const [click, setClick] = useState(false);\n  const [allPages, setAllPages] = useState(null);\n  const [totalPageViews, setTotalPageViews] = useState(null);\n  const [individualPageViews, setIndividualPageViews] = useState(null);\n  const [individualAssignmentViews, setIndividualAssignmentViews] = useState(null);\n  const [oneStudent, setOneStudent] = useState(null);\n  const [onePage, setOnePage] = useState(null);\n  const [studentDates, setStudentDates] = useState(null);\n  const [pageDates, setPageDates] = useState(null);\n  const [student, setStudent] = useState(null);\n  const [studentData, setStudentData] = useState(null);\n  const [pageData, setPageData] = useState(null);\n  const [result, setResult] = useState(null);\n  const [studentResult, setStudentResult] = useState(null);\n  const [pageResult, setPageResult] = useState(null);\n  const [page, setPage] = useState(null);\n  const [pageId, setPageId] = useState(null);\n  const [value, setValue] = React.useState('Average Duration');\n  const [valueY, setValueY] = React.useState('Unique Pages Accessed');\n  const [xaxis, setXAxis] = React.useState('duration', 'Average Duration')\n  const [classValue, setClassValue] = React.useState();\n  const [scatterXAxis, setScatterXAxis] = React.useState('durationInMinutes');\n  const [scatterYAxis, setScatterYAxis] = React.useState('objectCount');\n  const [scatterXAxisLabel, setScatterXAxisLabel] = React.useState('Average Duration');\n  const [scatterYAxisLabel, setScatterYAxisLabel] = React.useState('Unique Pages Accessed');\n  const [barXAxis, setBarXAxis] = React.useState('dateCount');\n  const [barYAxis, setBarYAxis] = React.useState('objectCount');\n  const [barXAxisLabel, setBarXAxisLabel] = React.useState('Unique Interaction Days');\n  const [barYAxisLabel, setBarYAxisLabel] = React.useState('Unique Pages Accessed');\n  const [open, setOpen] = useState(true);\n  const [index, setIndex] = useState(0);\n  const [display, setDisplay] = useState(true);\n  const [bin, setBin] = useState(1);\n  const [binLabel, setBinLabel] = useState('Day');\n  const [unit, setUnit] = useState('day');\n  const [allData, setAllData] = useState({});\n  const [width, setWidth] = useState();\n  const [heigth, setHeight] = useState();\n  const [pathLength, setPathLength] = useState();\n  const [chapters, setChapters] = useState([]);\n  const [chapterLabel, setChapterLabel] = useState(null);\n  const [courseChapter, setCourseChapter] = useState(null);\n  const [allChapters, setAllChapters] = useState(null);\n  const [courseLevel, setCourseLevel] = useState(null);\n  const [chosenPath, setChosenPath] = useState(null);\n  const [dataPath, setDataPath] = useState(null);\n  const [categories, setCategories] = useState([]);\n  const [category, setCategory] = useState(null);\n  const [subject, setSubject] = useState(null);\n  const [openFilter, setOpenFilter] = useState(false);\n  const [studentChartData, setStudentChartData] = useState(null);\n  const [reset, setReset] = useState(false);\n  const [resetPath, setResetPath] = useState(false);\n  const [adaptData, setAdaptData] = useState(null);\n  const [tagData, setTagData] = useState(null);\n  const [tagTypes, setTagTypes] = useState([]);\n  const [tagType, setTagType] = useState(null);\n  const [tagTitle, setTagTitle] = useState(null);\n  const [realCourses, setRealCourses] = useState(null);\n  const [courseName, setCourseName] = useState(null);\n  const myRef = useRef();\n  const target = React.useRef(null)\n  const size = useSize(target)\n  const [adaptCode, setAdaptCode] = useState(null)\n  const [adaptLevels, setAdaptLevels] = useState({});\n  const [levelGroup, setLevelGroup] = useState(null);\n  const [levelName, setLevelName] = useState(null);\n  const [hasAdapt, setHasAdapt] = useState(false)\n  const [showInfoBox, setShowInfoBox] = useState(true)\n  const [showTableFilters, setShowTableFilters] = useState(false)\n  const [showCheckboxes, setShowCheckboxes] = useState(false)\n  const [filterInfoBox, setFilterInfoBox] = useState(true)\n  const [count, setCount] = useState(0)\n  const [activityFilter, setActivityFilter] = useState(\"\")\n  const [tableColumns, setTableColumns] = useState({\n    \"All\": true,\n    \"LT Unique Pages Accessed\": true,\n    \"LT Total Page Views\": true,\n    \"LT Most Recent Page Load\": true,\n    \"LT Unique Interaction Days\": true\n  })\n  const [checkedValues, setCheckedValues] = useState(Object.keys(tableColumns))\n  var homepage = '/analytics/api'\n\n  useEffect(() => {\n\n     let realCourses = {}\n     axios(homepage+'/realcourses')\n       .then(response => {\n         let x = {}\n         response.data.forEach(course => {\n           x[course.course] = course._id\n         })\n         realCourses = x\n         setRealCourses(realCourses)\n       })\n\n    }, []);\n\n  function getAggregateData() {\n    var d = JSON.parse(JSON.stringify(allData)) // deep copy\n\n    console.log(tab)\n    if (tab === \"student\") {\n      var group = \"$actor.id\"\n    } else if (tab === \"page\") {\n      var group = \"$object.id\"\n    }\n    axios({\n      method: 'post',\n      url: homepage+'/data',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      data: {\n        startDate: start,\n        endDate: end,\n        course: course,\n        courseId: courseId,\n        path: dataPath,\n        groupBy: \"$actor.id\",\n        tagType: tagType,\n        tagTitle: tagTitle\n      }\n    }).then(response => {\n      d['student'] = JSON.parse(response.data)['documents']\n      setStudentResult(JSON.parse(response.data)['documents'])\n      setDisplay(true);\n      if ((Object.keys(d['student'][0])).includes(\"adapt\") && d['student'][0]['adapt'] !== false) {\n        setHasAdapt(true)\n        var columns = {\n          \"All\": true,\n          \"LT Unique Pages Accessed\": true,\n          \"LT Total Page Views\": true,\n          \"LT Most Recent Page Load\": true,\n          \"LT Unique Interaction Days\": true,\n          \"Adapt Unique Interaction Days\": true,\n          \"Adapt Unique Assignments\": true,\n          \"Adapt Most Recent Page Load\": true\n        }\n        var checks = Object.keys(columns)\n        setTableColumns(columns)\n        setCheckedValues(checks)\n      } else {\n        var columns = {\n          \"All\": true,\n          \"LT Unique Pages Accessed\": true,\n          \"LT Total Page Views\": true,\n          \"LT Most Recent Page Load\": true,\n          \"LT Unique Interaction Days\": true\n        }\n        var checks = Object.keys(columns)\n        setTableColumns(columns)\n        setCheckedValues(checks)\n      }\n    })\n\n    axios({\n      method: 'post',\n      url: homepage+'/data',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      data: {\n        startDate: start,\n        endDate: end,\n        course: course,\n        courseId: courseId,\n        path: dataPath,\n        groupBy: \"$object.id\",\n        tagType: tagType,\n        tagTitle: tagTitle\n      }\n    }).then(response => {\n      d['page'] = JSON.parse(response.data)['documents']\n      setPageResult(JSON.parse(response.data)['documents'])\n      setDisplay(true);\n    })\n    setAllData(d)\n  }\n\n  function getIndividualData() {\n    if (tab === \"student\") {\n      var indiv = student\n      var type = \"student\"\n      var group = \"$object.id\"\n    } else if (tab === \"page\") {\n      var indiv = pageId\n      var type = \"page\"\n      var group = \"$actor.id\"\n    }\n    console.log(indiv)\n    axios({\n      method: 'post',\n      url: homepage+'/individual',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      data: {\n        type: type,\n        individual: indiv,\n        startDate: individualStart,\n        endDate: individualEnd,\n        course: course,\n        courseId: courseId,\n        groupBy: group,\n        path: dataPath\n      }\n    }).then(response => {\n      if (tab === \"student\") {\n        console.log(\"STUDENT\")\n        console.log(student)\n        setStudentData(JSON.parse(response.data))\n      } else if (tab === \"page\") {\n        console.log(\"PAGE\")\n        console.log(page)\n        //console.log(response.data)\n        setPageData(JSON.parse(response.data))\n      }\n    })\n  }\n\n  function getObjectList() {\n    let students = [];\n    let pages = [];\n    let pageWithTitle = [];\n    var obj = {}\n    if (tab === \"student\") {\n      var group = \"$actor.id\"\n    } else if (tab === \"page\") {\n      var group = \"$object.id\"\n    }\n    axios({\n      method: 'post',\n      url: homepage+'/timelineData',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      data: {\n        course: course,\n        courseId: courseId,\n        groupBy: \"$actor.id\",\n        path: dataPath\n      }\n    })\n      .then(response => {\n        var d = JSON.parse(response.data)['documents']\n\n          setStudentDates(d);\n          d.forEach(s => students.push(s._id))\n          //setAllStudents(students);\n          setStudentData(null);\n        obj['allStudents'] = students\n        setClick(true);\n      })\n      axios({\n        method: 'post',\n        url: homepage+'/timelineData',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        data: {\n          course: course,\n          courseId: courseId,\n          groupBy: \"$object.id\",\n          path: dataPath\n        }\n      })\n        .then(response => {\n          var d = JSON.parse(response.data)['documents']\n            setPageDates(d);\n            d.forEach((s) => {\n              if (s.pageTitle !== undefined) {\n                pages.push(s.pageTitle);\n              } else {\n                pages.push(s._id);\n              }\n            })\n            obj['allPages'] = pages\n            setAllPages(pages)\n            setPageData(null);\n          setClick(true);\n        })\n  }\n\n  function getStudentChartData() {\n    setStudentChartData(null)\n      axios({\n        method: 'post',\n        url: homepage+'/studentchart',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        data: {\n          course: course,\n          courseId: courseId,\n          groupBy: barXAxis,\n          start: start,\n          end: end,\n          path: dataPath\n        }\n      })\n        .then(response => {\n          setStudentChartData(JSON.parse(response.data))\n        })\n  }\n\n  function getAdaptLevels() {\n    var levels = {}\n    axios({\n      method: 'post',\n      url: homepage+'/adaptlevels',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      data: {\n        courseId: courseId\n      }\n    })\n      .then(response => {\n        JSON.parse(response.data).forEach(a => {\n          var names = []\n          a.level_name.forEach(o => names.push(o.replaceAll(\"\\\"\", \"\")))\n          levels[a._id.replaceAll(\"\\\"\", \"\")] = names\n        })\n        //console.log(levels)\n        setAdaptLevels(levels)\n      })\n  }\n\n  function getPageViewData() {\n    setTotalPageViews(null)\n      axios({\n        method: 'post',\n        url: homepage+'/pageviews',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        data: {\n          bin: bin,\n          unit: unit,\n          course: course,\n          courseId: courseId,\n          start: start,\n          end: end,\n          path: dataPath\n        }\n      })\n        .then(response => {\n          console.log(\"PAGE VIEWS\")\n          setTotalPageViews(response.data)\n        })\n  }\n\n  function getIndividualPageViewData() {\n    setIndividualPageViews(null)\n    if (tab == \"page\") {\n      var p = page\n      var lgroup = null\n      var lname = null\n    } else if (tab === \"assignment\") {\n      var lgroup = levelGroup\n      var lname = levelName\n      var p = null\n    }\n      axios({\n        method: 'post',\n        url: homepage+'/individualpageviews',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        data: {\n          bin: bin,\n          unit: unit,\n          courseId: courseId,\n          start: start,\n          end: end,\n          path: dataPath,\n          individual: p,\n          levelGroup: lgroup,\n          levelName: lname\n        }\n      })\n        .then(response => {\n          if (tab === \"page\") {\n            setIndividualPageViews(response.data)\n          } else if (tab === \"assignment\") {\n            setIndividualAssignmentViews(response.data)\n          }\n        })\n  }\n\n  function getChapters() {\n    setChapters(null)\n    let allChapters = []\n    let chapter = {}\n    let tree = []\n      axios({\n        method: 'post',\n        url: homepage+'/chapters',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        data: {\n          course: course,\n          courseId: courseId\n        }\n      })\n        .then(response => {\n          var d = []\n          d = JSON.parse(response.data)\n          var longestPath = d[0]['count']\n          setPathLength(longestPath)\n          d.forEach((element, index) => {\n            element['chapter'].forEach((e, i) => {\n              if (i !== element['chapter'].length-1 && !(i in chapter)) {\n                chapter[i] = {}\n              }\n              if (i < element['chapter'].length-1) {\n                if (!(e in chapter[i])) {\n                  if (element['chapter'][i+1] !== {}) {\n                    chapter[i][e] = [element['chapter'][i+1]]\n                  }\n                } else if (!chapter[i][e].includes(element['chapter'][i+1])){\n                  if (element['chapter'][i+1] !== {}) {\n                    chapter[i][e].push(element['chapter'][i+1])\n                  }\n                }\n              }\n            })\n          })\n\n          var levels = {}\n          Object.keys(chapter).forEach(key => {\n            Object.keys(chapter[key]).forEach(c => {\n              levels[c] = key\n            })\n          })\n          setCourseLevel(levels)\n          setAllChapters(chapter)\n          setChapters(allChapters.filter((v, i, a) => a.indexOf(v) === i))\n        })\n\n  }\n\n  function getAdaptData() {\n      axios({\n        method: 'post',\n        url: homepage+'/adapt',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        data: {\n          course: adaptCode,\n          start: start,\n          end: end,\n          path: dataPath\n        }\n      })\n        .then(response => {\n          // console.log(\"ADAPT DATA\")\n          // console.log(response.data)\n          allData['adapt'] = JSON.parse(response.data)['documents']\n          //mergeLTAdaptData(allData['student'], JSON.parse(response.data)['documents'])\n          //setAdaptData(JSON.parse(response.data)['documents'])\n        })\n  }\n\n  function getTagInfo() {\n      axios({\n        method: 'post',\n        url: homepage+'/tags',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        data: {\n          course: course,\n          courseId: courseId,\n          start: start,\n          end: end,\n          path: dataPath\n        }\n      })\n        .then(response => {\n          var data = JSON.parse(response.data)['documents']\n          setTagData(data)\n          var types = []\n          var linkedData = {}\n          data.forEach(d => {\n            linkedData[d['_id']] = d['title']\n          })\n          if (data.length > 1) {\n            data.forEach(d => {\n              types.push(d['_id'])\n            })\n            //setTagTypes(types)\n          } else {\n            //setTagTypes(data[0]['_id'])\n            types.push(data[0]['_id'])\n          }\n          setTagTypes(linkedData)\n          console.log(linkedData)\n        })\n  }\n\n  function handleClick(event) {\n    event.preventDefault();\n    if ((course || courseId) && !(course && courseId)) {\n      setShowTableFilters(false)\n      setShowInfoBox(false)\n      setHasAdapt(false)\n      setDisableCourse(true);\n      setResult(null);\n      setStudentResult(null);\n      setPageResult(null);\n      //setTab(\"student\")\n      // setIndividualStart(null);\n      // setIndividualEnd(null);\n      // setDisableStudent(false);\n      //setTab(\"student\");\n      setStudent(null);\n      setPage(null);\n      setIndividualPageViews(null);\n      setAdaptLevels(null);\n      setAllChapters(null);\n      setChosenPath(null);\n      setDataPath(null);\n\n      getAggregateData();\n      getAdaptLevels();\n      //getTagInfo();\n      // if (course) {\n      //   getAdaptData()\n      // }\n      //getAdaptData();\n      getObjectList();\n      getStudentChartData();\n      getPageViewData();\n      getChapters();\n      // mergeLTAdaptData(allData['student'], allData['adapt'])\n    } else if (course && courseId) {\n      alert(\"Please choose either a course or a course Id.\")\n      setSubject(null)\n      setCourse(null)\n      setCategory(null)\n      setCourseId(null)\n    } else {\n      alert(\"Please choose a course.\")\n    }\n  }\n\n  function handleFilterClick(event, path=false) {\n    console.log(\"EVENT\")\n    console.log(event)\n    console.log(path)\n\n    event.preventDefault();\n    setOpenFilter(false)\n    if (path) {\n      setChosenPath(path)\n    }\n    setShowTableFilters(false)\n    setResetPath(false)\n    setDisable(true);\n    setDisplay(false);\n    setStudentResult(null);\n    setPageResult(null);\n    setStudent(null);\n    setPage(null);\n    setStudentData(null);\n    setPageData(null);\n    setDisable((state) => {\n      return state\n    })\n    setDisplay((state) => {\n      return state\n    })\n    setStudentResult((state) => {\n      return state\n    })\n    setPageResult((state) => {\n      return state\n    })\n    console.log(chosenPath)\n    //console.log(disable, display, studentResult)\n    getAggregateData();\n    getPageViewData();\n    getStudentChartData();\n    getObjectList();\n  }\n\n  function handleIndividual(event) {\n    event.preventDefault();\n    if (tab === \"student\") {\n      if (!student) {\n        alert(\"Please choose a student.\")\n      }\n      setDisableStudent(true);\n      setStudentData(null);\n      studentDates.forEach(s => {\n        if (s['_id'] === student) {\n          setOneStudent(s);\n        }\n      })\n    } else if (tab === \"page\") {\n      // if (!pageId) {\n      //   alert(\"Please choose a page.\")\n      // } else {\n      //   setDisablePage(true);\n      //   setPageData(null);\n      //   console.log(pageId)\n      //   pageDates.forEach(s => {\n      //     if (s['_id'] === pageId) {\n      //       setOnePage(s);\n      //     }\n      //   })\n      // }\n      setDisablePage(true)\n    } else if (tab === \"assignment\") {\n      setDisableAssignment(true)\n    }\n    //getIndividualData();\n    getIndividualPageViewData()\n  }\n\n  function changeScatterXAxis(option) {\n    setScatterXAxisLabel(option)\n    if (option === 'Average Duration') {\n      setScatterXAxis('durationInMinutes')\n    } else if (option === 'Unique Pages Accessed') {\n      setScatterXAxis('objectCount')\n    } else if (option === 'Average Percent Scrolled') {\n      setScatterXAxis('percentAvg')\n    }\n  }\n\n  function changeScatterYAxis(option) {\n    setScatterYAxisLabel(option)\n    if (option === 'Average Duration') {\n      setScatterYAxis('durationInMinutes')\n    } else if (option === 'Unique Pages Accessed') {\n      setScatterYAxis('objectCount')\n    } else if (option === 'Average Percent Scrolled') {\n      setScatterYAxis('percentAvg')\n    }\n  }\n\n  function changeBarXAxis(option) {\n    setBarXAxisLabel(option)\n    if (option === 'Unique Interaction Days') {\n      setBarXAxis('dateCount')\n    } else if (option === 'Unique Pages Accessed') {\n      setBarXAxis('objectCount')\n    } else if (option === 'Most Recent Page Load') {\n      setBarXAxis('lastDate')\n    }\n  }\n\n  function changeBarYAxis(option) {\n    setBarYAxisLabel(option)\n    if (option === 'Unique Interaction Days') {\n      setBarYAxis('dateCount')\n    } else if (option === 'Unique Pages Accessed') {\n      setBarYAxis('objectCount')\n    } else if (option === 'Most Recent Page Load') {\n      setBarYAxis('max')\n    }\n  }\n\n  function changeBinVal(option) {\n    setBinLabel(option)\n    if (option === 'Day') {\n      setUnit('day')\n      setBin(1)\n    } else if (option === 'Week') {\n      setUnit('week')\n      setBin(1)\n    } else if (option === '2 Weeks') {\n      setUnit('week')\n      setBin(2)\n    } else if (option === 'Month') {\n      setUnit('month')\n      setBin(1)\n    }\n  }\n\n  function filterDates(allDates, date, type) {\n    if (date) {\n      return date\n    } else if (type === \"start\" && allDates !== null) {\n      allDates = allDates.filter(d => d !== undefined);\n      (allDates.sort((a, b) => new Date(a).getTime()-new Date(b).getTime()))\n      return allDates[0];\n    } else if (type === \"end\" && allDates !== null) {\n      allDates = allDates.filter(d => d !== undefined);\n      (allDates.sort((a, b) => new Date(b)-new Date(a)))\n      return allDates[0];\n    }\n  }\n\n  function handleChange(type, value) {\n    if (type === \"start\") {\n      setStart(value);\n      setDisable(false);\n    }\n    if (type === \"end\") {\n      setEnd(value);\n      setDisable(false);\n    }\n    if (type === \"category\") {\n      setSubject(null)\n      setCourse(null)\n      setCourseId(null)\n      setCategory(value)\n    }\n    if (type === \"subject\") {\n      setCourse(null)\n      setSubject(value)\n    }\n    if (type === \"courseId\") {\n      setPage(null);\n      setStudent(null);\n      setDisableStudent(false);\n      setDisablePage(false);\n      setCourseName(value);\n      setCourseId(realCourses[value]);\n      setCategory(null)\n      setSubject(null)\n      setCourse(null)\n      setDisableCourse(false)\n      setChosenPath(null);\n      setDataPath(null);\n      setStart(null);\n      setEnd(null);\n    }\n    if (type === \"student\") {\n      setStudent(value);\n      //setStudentData(null);\n      // setIndividualStart(null);\n      // setIndividualEnd(null);\n      setDisableStudent(false);\n    }\n    if (type === \"page\") {\n      // pagesWithTitles.forEach(p => {\n      //   if (p[value] !== undefined) {\n      //     setPage(p[value])\n      //     console.log(p[value])\n      //   }\n      // })\n      setPage(value);\n      // setLevelGroup(null);\n      // setLevelName(null);\n      console.log(value)\n      //allData['page'].map(obj => console.log(obj.pageTitle))\n      var temp = (allData['page']).find(id => (id.pageTitle === value))\n      console.log(temp)\n      var pageId = temp._id\n      setPageId(pageId)\n      setPageData(null);\n      // setIndividualStart(null);\n      // setIndividualEnd(null);\n      setDisablePage(false);\n    } else if (type === \"pageLevelGroup\") {\n      setLevelGroup(value);\n      setLevelName(null);\n      // setPage(null);\n      // setPageId(null);\n    } else if (type === \"pageLevelName\") {\n      setIndividualAssignmentViews(null)\n      setLevelName(value);\n      setDisableAssignment(false);\n    }\n    if (type === \"individual start\") {\n      setStudentData(null); //to avoid changing the date before pressing apply\n      setPageData(null);\n      setIndividualStart(value);\n      if (tab === \"student\") {\n        setDisableStudent(false);\n      } else if (tab === \"page\") {\n        setDisablePage(false)\n      }\n    }\n    if (type === \"individual end\") {\n      setStudentData(null);\n      setPageData(null);\n      setIndividualEnd(value);\n      if (tab === \"student\") {\n        setDisableStudent(false);\n      } else if (tab === \"page\") {\n        setDisablePage(false)\n      }\n    }\n    if (type === \"chapter\") {\n      setChapterLabel(value)\n      setCourseChapter(value)\n      setDisable(false)\n    }\n    if (type === \"path\") {\n      setDataPath(value)\n      //setDisableMenu(false)\n      //setChosenPath(value)\n    }\n  }\n\n    function getStudentDates() {\n      studentDates.forEach(s => {\n        if (s['_id'] === student) {\n          setOneStudent(s);\n        }\n      })\n    }\n\n    function handleTabs(value) {\n      if (course && click) { //change when tabs can be switched\n        //setResult(null);\n        //setDisableCourse(false);\n        setDisableStudent(false);\n        //console.log(value)\n        if (value === 0) {\n          console.log(\"student\")\n          setTab(\"student\");\n          setIndex(0)\n        } else if (value === 1) {\n          console.log(\"page\")\n          setTab(\"page\");\n          setIndex(1)\n        } else if (value === 2) {\n          setTab(\"assignment\")\n          setIndex(2)\n        }\n      } else if (!course || !click) {\n        if (value === 0) {\n          //console.log(\"student\")\n          setTab(\"student\");\n          setIndex(0)\n        } else if (value === 1) {\n          //console.log(\"page\")\n          setTab(\"page\");\n          setIndex(1)\n        } else if (value === 2) {\n          setTab(\"assignment\")\n          setIndex(2)\n        }\n      } else {\n        alert(\"Please choose a course and hit Apply.\")\n      }\n    }\n\n    function clearDates(event) {\n      event.preventDefault();\n      setStart(null);\n      setEnd(null);\n      setDisable(false);\n    }\n\n    function clearTimelineDates(event) {\n      event.preventDefault();\n      setIndividualStart(null);\n      setIndividualEnd(null);\n      setDisableStudent(false);\n      setDisablePage(false);\n      if (tab === \"student\") {\n        setStudentData(null);\n      } else if (tab === \"page\") {\n        setPageData(null);\n      }\n    }\n\n    function menuCollapsible(event) {\n      setOpenFilter(!openFilter)\n      //setChosenPath(null)\n    }\n\n    function clearPath(event) {\n      event.preventDefault();\n      setChosenPath(null);\n      setDataPath(null);\n      setResetPath(true);\n    }\n\n    function filterReset(event) {\n      event.preventDefault();\n      setReset(true)\n      //setAllChapters(null);\n      setChosenPath(null);\n      setDataPath(null);\n      setStart(null);\n      setEnd(null);\n    }\n\n    function applyReset(event) {\n      event.preventDefault();\n      setOpenFilter(false)\n      setDisableCourse(true);\n      setResult(null);\n      setStudentResult(null);\n      setPageResult(null);\n      setStudent(null);\n      setPage(null);\n\n      getAggregateData();\n      getObjectList();\n      getStudentChartData();\n      getPageViewData();\n      setReset(false)\n    }\n\n    function changeColumns(option, value) {\n      // console.log(value)\n      // console.log(option['label'])\n      var val = option['label']\n      var columns = JSON.parse(JSON.stringify(tableColumns))\n      var checked = JSON.parse(JSON.stringify(checkedValues))\n      if (val === \"All\" && columns[val]) {\n        columns[val] = false\n        checked.find((v, index) => {\n          if (v === val) {\n            checked.splice(index, 1)\n          }\n        })\n      } else if (val === \"All\" && !columns[val]) {\n        Object.keys(columns).forEach(v => {\n          columns[v] = true\n        })\n        checked = Object.keys(columns)\n      } else {\n        if (columns[val]) {\n          columns[val] = false\n          columns['All'] = false\n        } else {\n          columns[val] = true\n        }\n        if (checked.includes(val)) {\n          checked.find((v, index) => {\n            if (v === val) {\n              checked.splice(index, 1)\n            }\n          })\n            checked.find((v, index) => {\n              if (v === 'All') {\n                checked.splice(index, 1)\n              }\n            })\n        } else {\n          checked.push(val)\n        }\n      }\n      setCheckedValues(checked)\n      setTableColumns(columns)\n      //console.log(checked)\n    }\n\n    function changeActivityFilter(option, data) {\n      setActivityFilter(option)\n      // if (option === \"No Recent LibreText Activity\") {\n      //   setActivityFilter(option)\n      //   // data.sort((a, b) => {\n      //   //   return a - b\n      //   // })\n      // } else if (option === \"No Recent Adapt Activity\") {\n      //\n      // } else if (option === \"Low Adapt Performance\") {\n      //\n      // }\n    }\n\n    function pageViewCharts() {\n      getPageViewData();\n      getIndividualPageViewData();\n    }\n\n  return (\n    <>\n    <Tabs justify=\"start\" margin=\"medium\" activeIndex={index} onActive={value => handleTabs(value)} style={{overflowY: \"scroll\"}}>\n\n      {click &&\n        <Tab title=\"By Student\" overflowY=\"scroll\">\n        {disableCourse && !studentResult &&\n          <InfoBox infoText=\"Loading, please wait\" showIcon={true} icon={<Spinner/>} />\n        }\n          {studentResult && allData[\"student\"] && allData[\"student\"].length < 1 &&\n            <Notification title=\"No data to display.\" onClose={() => {}}/>\n          }\n            <Grommet theme={theme} full fill={true} overflowY=\"scroll\">\n              <Box fill={true}>\n              <Box direction=\"row\">\n              {studentResult &&\n                <Box>\n                  <Box width=\"100px\" margin={{top: \"medium\", left: \"xsmall\"}}>\n                    <Button label=\"Choose Columns\" secondary color=\"#0047BA\" size=\"small\" onClick={() => setShowCheckboxes(!showCheckboxes)}/>\n                  </Box>\n                  {showCheckboxes &&\n                    <CheckBoxGroup\n                      margin={{top: \"medium\", left: \"xsmall\"}}\n                      options={Object.keys(tableColumns)}\n                      value={checkedValues}\n                      onChange={({ option, value }) => changeColumns(option, value)}\n                    />\n                  }\n                </Box>\n              }\n              <Grid\n                fill={true}\n                rows={[ '2/3', '2/3', 'medium', 'large', 'large']}\n                columns={['15%', '79%']}\n                gap=\"small\"\n                areas={[\n                { name: 'table', start: [0, 0], end: [1, 0] },\n                { name: 'plots', start: [0, 1], end: [1, 1] },\n                { name: 'timeline-filters', start: [0,2], end: [1,2] },\n                { name: 'timeline', start: [0,3], end: [1,3] },\n                { name: 'path', start: [0, 4], end: [1, 4] }\n                ]}\n                flex={true}\n                responsive={true}\n                margin=\"medium\"\n                overflowY=\"scroll\"\n                >\n                {studentResult && allData[\"student\"].length > 0 &&\n                <>\n                {disable && (!studentResult || !display) &&\n                  <Box gridArea=\"table\" background=\"light-2\" >\n                    <InfoBox infoText=\"Loading, please wait\" showIcon={true} icon={<Spinner/>} />\n                  </Box>\n                }\n                {studentResult && click && display &&\n                  <Box gridArea=\"table\" border={true} overflowY=\"scroll\" responsive={true}>\n                  {\n                    // <Box direction=\"row\">\n                    //   <Box width=\"250px\" height=\"85px\">\n                    //     <Select\n                    //       options={['No Recent LibreText Activity', 'No Recent Adapt Activity', 'Low Adapt Performance']}\n                    //       margin={{right: \"medium\", left: \"medium\"}}\n                    //       value={activityFilter}\n                    //       onChange={({ option }) => changeActivityFilter(option, allData[\"student\"])}\n                    //     />\n                    //   </Box>\n                    //   <Button primary label=\"Apply\" onClick={() => {}}/>\n                    // </Box>\n                  }\n                    <DataTable tab={tab} data={allData[\"student\"]} hasAdapt={hasAdapt} showColumns={tableColumns} activityFilter={activityFilter}/>\n                  </Box>\n                }\n                {studentResult && click && display &&\n                  <Box ref={target} gridArea=\"plots\" border={true} responsive={true} fill={true} direction=\"row\" justifyContent=\"center\" justify=\"center\" align=\"center\" overflowY=\"scroll\" responsive={true}>\n                    <Grid\n                      fill={true}\n                      rows={['xsmall', 'full']}\n                      columns={['100%']}\n                      gap=\"none\"\n                      areas={[\n                        { name: 'title', start: [0, 0], end: [0, 0]},\n                        { name: 'scatter-plot', start: [0, 1], end: [0, 1]}\n                      ]}\n                      overflowY=\"scroll\"\n                      responsive={true}\n                      >\n                      <Box align=\"center\" direction=\"column\" gridArea='title'>\n                        <TitleText title=\"Student Metrics Bar Chart\" text=\"This graph shows data for all students. Switch the axis values using the filters to the left. Click on a bar to populate a table with the chosen data.\" topMargin=\"small\"/>\n                      </Box>\n                      <Box gridArea='scatter-plot' justify=\"center\" direction=\"row\" margin={{bottom: \"xlarge\"}} responsive={true}>\n                        {//<Button alignSelf=\"start\" secondary onClick={() => setShowFilter(true)} icon={<Filter/>} margin={{top: \"small\"}}/>\n                        }\n                        <Button secondary size=\"small\" alignSelf=\"start\" label=\"Filters\" onClick={() => setShowFilter(true)} margin={{top: \"small\"}}/>\n                        {showFilter && (\n                          <Layer\n                            onEsc={() => setShowFilter(false)}\n                            onClickOutside={() => setShowFilter(false)}\n                            position=\"left\"\n                            margin={{left: \"large\"}}\n                          >\n                          <Button icon={<Close/>} onClick={() => setShowFilter(false)} />\n                          <Box direction=\"column\" alignSelf=\"center\" margin=\"large\">\n                            <Text size=\"medium\" weight=\"bold\" textAlign=\"center\">Bar Chart Display Filters</Text>\n                            <Text>Data:</Text>\n                            <Select\n                              options={['Unique Pages Accessed', 'Unique Interaction Days', 'Most Recent Page Load']}\n                              margin={{right: \"medium\", left: \"medium\"}}\n                              value={barXAxisLabel}\n                              onChange={({ option }) => changeBarXAxis(option)}\n                            />\n                            <Button primary label=\"Apply\" onClick={() => getStudentChartData()} margin=\"large\"/>\n                          </Box>\n                        </Layer>\n                      )}\n                      {!studentChartData &&\n                        <InfoBox infoText=\"Loading, please wait\" showIcon={true} icon={<Spinner/>} />\n                      }\n                      {studentChartData &&\n                        <StudentChart hasAdapt={hasAdapt} showColumns={tableColumns} allData={allData['student'].filter(o => o.isEnrolled === true)} tab={tab} data={studentChartData['documents']} xaxis=\"_id\" xaxisLabel={barXAxisLabel} yaxis={barYAxis} yaxisLabel={barYAxisLabel} width={1000}/>\n                      }\n                    </Box>\n                  </Grid>\n                </Box>\n              }\n              </>\n            }\n              </Grid>\n              </Box>\n              </Box>\n            </Grommet>\n          </Tab>\n        }\n        {click &&\n          <Tab title=\"By Page\" overflowY=\"scroll\">\n            {disableCourse && !pageResult &&\n              <InfoBox infoText=\"Loading, please wait\" showIcon={true} icon={<Spinner/>} />\n            }\n            {pageResult && allData[\"page\"].length < 1 &&\n              <Notification title=\"No data to display.\" onClose={() => {}}/>\n            }\n              <Grommet theme={theme} full fill=\"true\" overflowY=\"scroll\">\n                <Box fill={true}>\n              <Box direction=\"row\">\n                <Grid\n                  fill={true}\n                  rows={['2/3', '2/3', '1/3', '2/3']}\n                  columns={['15%', '79%']}\n                  gap=\"small\"\n                  areas={[\n                  { name: 'table', start: [0, 0], end: [1, 0] },\n                  { name: 'horizontal-chart', start: [0, 1], end: [1, 1] },\n                  { name: 'timeline-filters', start: [0,2], end: [1,2] },\n                  { name: 'timeline', start: [0,3], end: [1,3] }\n                  ]}\n                  flex={true}\n                  responsive={true}\n                  margin=\"medium\"\n                  overflowY=\"scroll\"\n                  >\n\n                {pageResult && allData[\"page\"].length > 0 &&\n                <>\n                  {disable && (!pageResult || !display) &&\n                    <Box gridArea=\"table\" background=\"light-2\" >\n                      <InfoBox infoText=\"Loading, please wait\" showIcon={true} icon={<Spinner/>} />\n                    </Box>\n                  }\n                  {pageResult && click && display &&\n                    <Box gridArea=\"table\" border={true} >\n                      <DataTable tab={tab} data={allData[\"page\"]} />\n                    </Box>\n                  }\n                {pageResult && click && display &&\n                  <Box gridArea=\"horizontal-chart\" border={true} align=\"center\" direction=\"row\" overflowY=\"scroll\">\n                    <Grid\n                      fill={true}\n                      rows={['1/5', '4/5']}\n                      columns={['100%']}\n                      gap=\"small\"\n                      areas={[\n                        { name: 'title', start: [0, 0], end: [0, 0]},\n                        { name: 'plot', start: [0, 1], end: [0, 1]}\n                      ]}\n                      >\n                      <Box align=\"center\" direction=\"column\" gridArea='title'>\n                        <TitleText title=\"Aggregate Page Views Bar Chart\" text={\"This graph shows the number of page views for all pages in \"+courseName+\". Switch the unit of time using the filters to the left.\"} topMargin=\"small\"/>\n                      </Box>\n                      <Box gridArea='plot' justify=\"center\" direction=\"row\">\n                        <Button alignSelf=\"start\" secondary onClick={() => setShowFilter(true)} icon={<Filter/>} margin={{top: \"small\", left: \"small\"}}/>\n                          {showFilter && (\n                            <Layer\n                              onEsc={() => setShowFilter(false)}\n                              onClickOutside={() => setShowFilter(false)}\n                              position=\"left\"\n                              margin={{left: \"large\"}}\n                            >\n                            <Button icon={<Close/>} onClick={() => setShowFilter(false)} />\n                            <Box direction=\"column\" alignSelf=\"center\"  margin=\"large\">\n                              <Text size=\"medium\" weight=\"bold\" textAlign=\"center\">Bar Chart Display Filters</Text>\n                              <Text>Unit of Time:</Text>\n                              <Select\n                                options={['Day', 'Week', '2 Weeks', 'Month']}\n                                margin={{right: \"medium\", left: \"medium\"}}\n                                value={binLabel}\n                                onChange={({ option }) => changeBinVal(option)}\n                              />\n                              <Button primary label=\"Apply\" onClick={() => pageViewCharts()} margin=\"large\"/>\n                            </Box>\n                          </Layer>\n                        )}\n                        {totalPageViews &&\n                          <PageViews data={totalPageViews} type=\"aggregate\" xaxis=\"_id\" yaxis=\"count\" binLabel={binLabel} width={980}/>\n                        }\n                      </Box>\n                    </Grid>\n                  </Box>\n                }\n                {pageResult && click && display && allPages &&\n                  <Box gridArea=\"timeline-filters\" border={true} align=\"center\" pad=\"small\" overflowY=\"auto\">\n                    <TitleText title=\"Individual Page Metrics Bar Chart\" text=\"This graph shows data for an individual page. Switch the unit of time using the filters to the left.\" topMargin=\"small\"/>\n                    <Box direction=\"row\">\n                      <Select\n                        options={allPages}\n                        margin={{vertical: \"xsmall\", right: \"large\"}}\n                        dropAlign={{top: \"bottom\", left: \"left\", right: \"right\"}}\n                        dropHeight=\"small\"\n                        value={page}\n                        onChange={({ option }) => handleChange(\"page\", option)}\n                      />\n                    </Box>\n                      <Button primary label=\"Apply\" disabled={disablePage} onClick={handleIndividual} margin={{bottom: \"small\", top: \"small\", right: \"medium\"}}/>\n\n                  </Box>\n                }\n                {disablePage && !individualPageViews &&\n                  <Box gridArea=\"timeline\" background=\"light-2\" >\n                    <InfoBox infoText=\"Loading, please wait\" showIcon={true} icon={<Spinner/>} />\n                  </Box>\n                }\n                {(individualPageViews != null) &&\n                  <Box gridArea=\"timeline\" align=\"center\" pad=\"small\" overflowY=\"auto\">\n\n                    <Box  justify=\"center\" direction=\"row\">\n                      <Button alignSelf=\"start\" secondary onClick={() => setShowFilter(true)} icon={<Filter/>} margin={{top: \"small\", left: \"small\"}}/>\n                        {showFilter && (\n                          <Layer\n                            onEsc={() => setShowFilter(false)}\n                            onClickOutside={() => setShowFilter(false)}\n                            position=\"left\"\n                            margin={{left: \"large\"}}\n                          >\n                          <Button icon={<Close/>} onClick={() => setShowFilter(false)} />\n                          <Box direction=\"column\" alignSelf=\"center\"  margin=\"large\">\n                            <Text size=\"medium\" weight=\"bold\" textAlign=\"center\">Bar Chart Display Filters</Text>\n                            <Text>Unit of Time:</Text>\n                            <Select\n                              options={['Day', 'Week', '2 Weeks', 'Month']}\n                              margin={{right: \"medium\", left: \"medium\"}}\n                              value={binLabel}\n                              onChange={({ option }) => changeBinVal(option)}\n                            />\n                            <Button primary label=\"Apply\" onClick={() => pageViewCharts()} margin=\"large\"/>\n                          </Box>\n                        </Layer>\n                      )}\n                      {individualPageViews &&\n                        <Box width=\"980px\" height=\"100%\">\n                        <PageViews data={individualPageViews} type=\"individual\" xaxis=\"_id\" yaxis=\"count\" binLabel={binLabel} width={980} height={500}/>\n                        </Box>\n                      }\n                    </Box>\n                  </Box>\n                }\n                </>\n              }\n              </Grid>\n              </Box>\n              </Box>\n            </Grommet>\n\n        </Tab>\n      }\n      {hasAdapt &&\n        <Tab title=\"By Assignment\">\n          <Grommet theme={theme}>\n            <Grid\n              fill={true}\n              rows={[ 'auto', 'auto']}\n              columns={['15%', '79%']}\n              gap=\"small\"\n              areas={[\n              { name: 'timeline-filters', start: [0, 0], end: [1, 0] },\n              { name: 'timeline', start: [0,1], end: [1,1] }\n              ]}\n              flex={true}\n              responsive={true}\n              margin=\"medium\"\n              overflowY=\"scroll\"\n              >\n              {adaptLevels &&\n                <Box gridArea=\"timeline-filters\" border={true} align=\"center\" pad=\"small\" overflowY=\"auto\">\n                  <TitleText title=\"Individual Assignment Metrics Bar Chart\" text=\"This graph shows data for an individual page. Switch the unit of time using the filters to the left.\" topMargin=\"small\"/>\n                  <Box direction=\"row\">\n                    {adaptLevels &&\n                      <>\n                    <Select\n                      options={Object.keys(adaptLevels)}\n                      margin={{right: \"small\", vertical: \"xsmall\"}}\n                      value={levelGroup}\n                      onChange={({ option }) => handleChange(\"pageLevelGroup\", option)}\n                    />\n                    {levelGroup &&\n                      <Select\n                        options={adaptLevels[levelGroup]}\n                        margin={{right: \"medium\", left: \"medium\", vertical: \"xsmall\"}}\n                        value={levelName}\n                        onChange={({ option }) => handleChange(\"pageLevelName\", option)}\n                      />\n                    }\n                    </>\n                  }\n                  </Box>\n                    <Button primary label=\"Apply\" disabled={disableAssignment} onClick={handleIndividual} margin={{bottom: \"small\", top: \"small\", left: \"small\"}}/>\n\n                </Box>\n              }\n                {(individualAssignmentViews != null) &&\n                  <Box gridArea=\"timeline\" align=\"center\" pad=\"small\" overflowY=\"auto\">\n\n                    <Box  justify=\"center\" direction=\"row\">\n                      <Button alignSelf=\"start\" secondary onClick={() => setShowFilter(true)} icon={<Filter/>} margin={{top: \"small\", left: \"small\"}}/>\n                        {showFilter && (\n                          <Layer\n                            onEsc={() => setShowFilter(false)}\n                            onClickOutside={() => setShowFilter(false)}\n                            position=\"left\"\n                            margin={{left: \"large\"}}\n                          >\n                          <Button icon={<Close/>} onClick={() => setShowFilter(false)} />\n                          <Box direction=\"column\" alignSelf=\"center\"  margin=\"large\">\n                            <Text size=\"medium\" weight=\"bold\" textAlign=\"center\">Bar Chart Display Filters</Text>\n                            <Text>Unit of Time:</Text>\n                            <Select\n                              options={['Day', 'Week', '2 Weeks', 'Month']}\n                              margin={{right: \"medium\", left: \"medium\"}}\n                              value={binLabel}\n                              onChange={({ option }) => changeBinVal(option)}\n                            />\n                            <Button primary label=\"Apply\" onClick={() => pageViewCharts()} margin=\"large\"/>\n                          </Box>\n                        </Layer>\n                      )}\n                      {individualAssignmentViews &&\n                        <Box width=\"980px\" height=\"100%\">\n                        <PageViews data={individualAssignmentViews} type=\"individual\" xaxis=\"_id\" yaxis=\"count\" binLabel={binLabel} width={980} height={500}/>\n                        </Box>\n                      }\n                    </Box>\n                  </Box>\n                }\n                {disableAssignment && !individualAssignmentViews &&\n                  <Box gridArea=\"timeline\" background=\"light-2\" >\n                    <InfoBox infoText=\"Loading, please wait\" showIcon={true} icon={<Spinner/>} />\n                  </Box>\n                }\n            </Grid>\n          </Grommet>\n        </Tab>\n      }\n      {realCourses &&\n        <Box fill>\n        <Box width=\"100%\" responsive={true} margin={{bottom: \"small\"}}>\n        {showInfoBox &&\n          <InfoBox show={showInfoBox} infoText=\"Please choose a course.\" color=\"#b0e0e6\" main={true}/>\n        }\n        </Box>\n        <Box direction=\"row\">\n          <Box gridArea=\"courses\" alignContent=\"center\" align=\"center\" alignSelf=\"center\" fill>\n            <Box >\n              <Box direction=\"row\">\n              <Box width=\"500px\" margin={{right: \"medium\", left: \"large\", bottom: \"small\"}}>\n                <Select\n                  options={Object.keys(realCourses)}\n                  margin={{right: \"large\", left: \"large\", bottom: \"small\"}}\n                  value={courseName}\n                  dropHeight=\"medium\"\n                  onChange={({ option }) => handleChange(\"courseId\", option)}\n                />\n              </Box>\n              <Button label=\"Apply\" style={{height: 45}} primary color=\"#0047BA\" disabled={disableCourse} onClick={handleClick}/>\n              </Box>\n                {disableCourse && !allData['student'] && !allData['page'] &&\n                  <InfoBox infoText=\"Loading, please wait\" showIcon={true} icon={<Spinner/>} />\n                }\n            </Box>\n          </Box>\n          {allData['student'] &&\n          <Box direction=\"column\" alignSelf=\"start\" border={true} width=\"300px\" height=\"100px\">\n            <Box direction=\"row\">\n              <Box margin={{left: \"small\", bottom: \"small\", top: \"small\"}} border={true} height=\"30px\" width=\"40px\" background='rgb(255, 255, 158, .5)'/>\n              <Text margin={{left: \"small\", bottom: \"small\", top: \"small\"}}>LibreText Data</Text>\n            </Box>\n            <Box direction=\"row\">\n              <Box margin={{left: \"small\", bottom: \"small\"}} border={true} height=\"30px\" width=\"40px\" background='rgb(171, 247, 177, .5)'/>\n              <Text margin={{left: \"small\", bottom: \"small\"}}>Adapt Data</Text>\n            </Box>\n          </Box>\n          }\n          </Box>\n        </Box>\n      }\n\n      <Box gridArea=\"header\" background=\"#022851\" fill={true} contentAlign=\"center\" margin={{top: \"small\"}}>\n        <Heading level='3' alignSelf=\"start\" responsive={true} gridArea=\"header\" margin=\"small\">LibreTexts Activity Dashboard</Heading>\n      </Box>\n\n      {allData['student'] && allData['page'] &&\n        <Box>\n          <Button margin=\"medium\" color=\"#022851\" label=\"Data Filters\" onClick={() => setShowTableFilters(!showTableFilters)} />\n        </Box>\n      }\n      {!showTableFilters && allData['student'] && allData['page'] && count === 0 &&\n        <InfoBox count={count} setCount={setCount} infoText=\"Click on the button to the left to filter the data by date and course unit.\" color='#b0e0e6'/>\n      }\n      {showTableFilters &&\n        <>\n        <Box direction=\"row\">\n        <Box gridArea=\"filters\" border={true} direction=\"row\" height=\"125px\" margin={{bottom: \"medium\"}}>\n          <Box margin={{bottom: \"medium\", top: 'xsmall'}} direction=\"row\" height=\"100px\">\n          <Box>\n            <Text size=\"large\" weight=\"bold\" textAlign=\"center\" margin={{left: \"small\"}}> Data Filters </Text>\n                </Box>\n            <Box direction=\"column\" pad=\"small\" direction=\"row\" margin={{top: \"medium\"}}>\n              <Text margin={{vertical: \"small\", right: \"xsmall\"}}>Start:</Text>\n              <DateInput\n                format=\"mm/dd/yyyy\"\n                value={start}\n                onChange={({ value }) => {handleChange(\"start\", value)}}\n              />\n              <Text margin={{vertical: \"small\", right: \"xsmall\", left: \"xsmall\"}}>End:</Text>\n              <DateInput\n                format=\"mm/dd/yyyy\"\n                value={end}\n                onChange={({ value }) => {handleChange(\"end\", value)}}\n              />\n            </Box>\n            <Box direction=\"row\" alignSelf=\"center\" pad=\"small\">\n            <Button size=\"small\" margin={{bottom: \"small\", top: \"medium\", horizontal: \"medium\"}} label=\"Clear Dates\" onClick={clearDates} color='#022851'/>\n              <Button label=\"Apply\" margin={{top: \"small\"}} style={{height: 45}} primary color=\"#0047BA\" disabled={disable} onClick={handleFilterClick}/>\n            </Box>\n          </Box>\n        </Box>\n            {allChapters && courseLevel &&\n              <Box margin={{bottom: \"medium\"}} >\n                <Button alignSelf=\"start\" margin={{horizontal: \"xlarge\"}} label=\"Course Structure Menu\" onClick={menuCollapsible} color='#022851'/>\n                <Collapsible open={openFilter}>\n                    <Box width=\"350px\" border={resetPath} margin=\"large\">\n                    {!resetPath &&\n                      <TitleText title=\"Course Structure Dropdown\" text=\"Choose a unit from the course to focus on.\"/>\n                    }\n                    {resetPath &&\n                      <Text margin=\"medium\">Please hit apply for the changes to take effect.</Text>\n                    }\n                    <MultiSelect resetPath={resetPath} pathLength={pathLength} data={allChapters} levels={courseLevel} handleChange={handleChange} filterClick={handleFilterClick} init={dataPath} clearPath={clearPath}/>\n                  </Box>\n                </Collapsible>\n              </Box>\n            }\n          </Box>\n              </>\n      }\n      {(chosenPath || start || end || reset) && !showTableFilters &&\n        <Box direction=\"column\" border={true} margin={{top: \"small\", right: \"medium\"}} width={{min: \"500px\"}}>\n        {chosenPath &&\n          <Text margin=\"small\">Current chosen path: {chosenPath.split(\"/\").map(a => <li>{a.replaceAll(\"_\", \" \")}</li>)}</Text>\n        }\n        {start &&\n          <Text margin=\"small\">Start Date: {(new Date(start.split(\"T\")[0])).toString()}</Text>\n        }\n        {end &&\n          <Text margin=\"small\">End Date: {(new Date(end.split(\"T\")[0])).toString()}</Text>\n        }\n          {!reset &&\n            <Button secondary size=\"small\" label=\"Clear All Filters\" alignSelf=\"center\" color=\"#022851\" margin={{vertical: \"small\"}} onClick={filterReset} type=\"reset\"/>\n          }\n          {reset &&\n            <Box direction=\"column\">\n              <Text margin=\"medium\">Please hit apply for the changes to take effect.</Text>\n              <Button primary label=\"Apply\" onClick={applyReset} color=\"#022851\" margin={{bottom: \"small\", top: \"small\", horizontal: \"large\"}}/>\n            </Box>\n          }\n        </Box>\n\n  }\n    </Tabs>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}